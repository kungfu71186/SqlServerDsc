[ClassVersion("1.0.0.0"), FriendlyName("SqlRS")]
class MSFT_SqlRS : OMI_BaseResource
{
    [Key, Description("Name of the SQL Server Reporting Services instance to be configured.")] String InstanceName;
    [Write, Description("Service Account used to run the Reporting Services windows service. If using a managed service account, you can specify any password, but the '$' must be attached to the end of the service account name"), EmbeddedInstance("MSFT_Credential")] String ServiceAccount;
    [Required, Description("Name of the SQL Server to host the Reporting Service database.")] String DatabaseServerName;
    [Required, Description("Name of the SQL Server instance to host the Reporting Service database.")] String DatabaseInstanceName;
    [Write, Description("The type of authentication to use when connecting to the database server, the default will be Integrated."), ValueMap{"Integrated","SQL"}, Values{"Integrated","SQL"}] String DatabaseAuthentication;
    [Write, Description("SQL user used to logon to the database. This parameter is only used if 'DatabaseAuthentication' is set to 'SQL'"), EmbeddedInstance("MSFT_Credential")] String DatabaseSQLCredential;
    [Write, Description("Report Server Web Service virtual directory. Optional.")] String ReportServerVirtualDirectory;
    [Write, Description("Report Server URL reservations. Optional. If not specified, 'http://+:80' URL reservation will be used.")] String ReportServerReservedUrl[];
    [Write, Description("Report Manager/Report Web App virtual directory name. Optional.")] String ReportsVirtualDirectory;
    [Write, Description("Report Manager/Report Web App URL reservations. Optional. If not specified, 'http://+:80' URL reservation will be used.")] String ReportsReservedUrl[];
    [Write, Description("The email used for the email sender address")] String EmailSender;
    [Write, Description("The SMTP server used to send emails")] String EmailSMTP;
    [Write, Description("The SMTP authentication type used to connect to the SMTP server. 'None' will not use any credentials. 'Basic' will use a username and password. 'Integrated' will use the 'ServiceAccount' credentials"), , ValueMap{"None","Basic","Integrated"}, Values{"None","Basic","Integrated"}] String EmailAuthentication ;
    [Write, Description("SMTP credentials used to connect to the SMTP server with. This parameter is only used if 'EmailAuthentication' is set to 'Basic'"), EmbeddedInstance("MSFT_Credential")] String EmailSMTPUser;
    [Write, Description("Execution service account credentials. This account can be used to run a report on behalf of this service account."), EmbeddedInstance("MSFT_Credential")] String ExecutionAccount;
    [Write, Description("File Share service account credentials. This account can be used to setup subscriptions to access file shares."), EmbeddedInstance("MSFT_Credential")] String FileShareAccount;
    [Write, Description("If connections to the Reporting Services must use SSL. If this parameter is not assigned a value, the default is that Reporting Services does not use SSL.")] Boolean UseSsl;
    [Write, Description("Reporting Services need to be restarted after initialization or settings change. If this parameter is set to $true, Reporting Services will not be restarted, even after initialization.")] Boolean SuppressRestart;
    [Read, Description("A list of Scale-Out servers used for high availability.")] String[] ScaleOutServers;
    [Read, Description("Is the Reporting Services instance initialized.")] Boolean IsInitialized;
    [Read, Description("Reporting Services product version.")] String Version;
    [Read, Description("Reporting Services edition name.")] String EditionName;
    [Read, Description("Reporting Services installation ID.")] String InstallationID;
    [Read, Description("Reporting Services configuration file path.")] String ReportServerConfigPath;
    [Read, Description("The current service account that Reporting Services is using.")] String ServiceAccountActual;
    [Read, Description("Whether or not Email is connecting to the SMTP server using SSL.")] String EmailSMTPSSL;
};
