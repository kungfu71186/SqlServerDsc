[ClassVersion("1.0.0.0"), FriendlyName("SqlRS")]
class MSFT_SqlRS : OMI_BaseResource
{
    [Key, Description("Currently there are only two possible instances. SSRS and PBIRS. While it may be possible to add more, this requires a lot of work and it's not really supported. It is possible to have SSRS and PBIRS installed on the same server though. Because of these limitations, these will be the only values supported. Default{'PBIRS'}"), ValueMap{'PBIRS', 'SSRS'}, Values{'PBIRS', 'SSRS'}] String ReportServiceInstanceName;
    [Write, Description("When specified, this will attempt to set the Reporting Service service account using it's short name. A Virtual account is a created account that can only be used locally. Meaning, that the database and reporting services have to be installed on the same server. If the database is intalled on a remote database like a cluster, a Windows account would be the best option, otherwise Reporting Services may fail to operate. Default{'Virtual'}), ValueMap{'Virtual', 'Network', 'System', 'Local', 'Windows'}, Values{'Virtual', 'Network', 'System', 'Local', 'Windows'}] String ServiceAccountLogonType;
    [Write, Description("When 'ServiceAccountLogonType' is specified as 'Windows', this credential will be used as the Report Services service account.") ] String ServiceAccount;
    [Write, Description("This is the Report Services manager virtual directory. This is not the front-end, but is used for backend functions. Default{'ReportServer'"}] String ReportManagerVirtualDirectory;
    [Write, Description("This is a list of strings used to setup the interface to connect to the backend manager. The protocol, ip address or DNS, and port must be specified. (http|https)://(IP|Domain):(Port). The one exception is the '+' sign for IP, this will allow access from all ip addresses (127.0.0.1, Hostname, and any others). Default{'http://+:80'}"] String[] ReportManagerUrls;
    [Write, Description("This is the Web Portal virtual directory. This is used for the front-end. Default('Reports')] String ReportWebPortalVirtualDirectory;
    [Write, This is a list of strings to setup the front-end interface for the web portal. An example would 'reports.contoso.com'. The protocol, ip address or DNS, and port must be specified. (http|https)://(IP|Domain):(Port). The one exception is the '+' sign for IP, this will allow access from all ip addresses (127.0.0.1, Hostname, and any others). Default{'http://+:80'}"] String[] ReportWebPortalUrls;
    [Write, Description("This is the database server and instance name. If using the default instance (MSSQLSERVER), only specify the SQL server name. Otherwise, specify the SQL server and Instance name with a backslash: "SQLSERVER\MYINSTANCE". Default{"$env:Computername"}] String DatabaseServerName;
    [Write, Description("This parameter will be used when connecting to the SQL database. This account must have rights to create and managed the databases as it will be used to create the Reporting Services Database. If Sql logon is specified, then the 'DatabaseConnectCredential' must be specifed. Because this is an integrated uesr account, the resource needs to be run with PsDscRunAsCredential if not using a Sql Logon account.") Default{'Integrated'}, ValueMap{'Integrated', 'Sql'}, Values{'Integrated', 'Sql'}] String DatabaseConnectLogonType;
    [Write, Description("This parameter is only used when the 'DatabaseConnectLogonType' is specifed as 'Sql'. When specified, this is the SQL login user account used to connect to the database. This credential will need the ability to manage and create databases as it will be used to create the Reporting Services database."), EmbeddedInstance('MSFT_Credential')] String DatabaseConnectCredential;
    [Write, Description("This is the name of database that is created. If the database already exists and this server is not part of that database, then the resource will simply fail. The exception to this is when the 'IsScaleOutServer' is specifed as '$true', then the resource will attempt to add the server as a Scale-Out server to the database.  Default{'ReportServer'}"] String DatabaseName;
    [Write, Description("User account used to grant access to the report server database. This will be the user that is given rights to manage the database after it has been created. If 'Service' is specified, then the user account will be the one defined in 'ServiceAccountLogonType/ServiceAccount'. If 'Sql' or 'Windows' is specifed, then the 'ReportDatabaseCredential' must also be specifed. Default{'Service'}"), ValueMap{'Service', 'Sql', 'Windows'}, Values{'Service', 'Sql', 'Windows'}] String ReportDatabaseLogonType;
    [Write, Description("User account used to grant access to the report server database. This will be the user that is given rights to manage the database after it has been created. This is sonly used when the 'ReportDatabaseLogonType' is specified as 'Sql' or 'Windows'."), EmbeddedInstance('MSFT_Credential')] String ReportDatabaseCredential;
    [Write, Description("Used to check if 'ReportDatabaseUserLoginType' is Service, but database is remote. The report server will not work if using a local service account and the database is remote. If the 'ServiceAccountLogonType' was specified as a 'Windows' account, then this should work ok with a remote database server. The local service accounts only work if the Database and Reporting Services are installed on the same server. Default{$false}"] String UseServiceWithRemoteDatabase;
    [Write, Description("The email address used to send emails as")] String EmailSender;
    [Write, Description("The SMTP server address")] String EmailSMTP;
    [Write, Description("The type of authentication used to login to the SMTP server. If 'Basic' is specifed, then the 'EmailAuthentication' parameter must be specified. If 'Integrated' is specifed, then the Reporting Services service account will be used that was specified in 'ServiceAccountLogonType/ServiceAccount'. Default{'None'}"), ValueMap{"None","Basic","Integrated"}, Values{"None","Basic","Integrated"}] String EmailAuthentication;
    [Write, Description("SMTP credentials used to connect to the SMTP server with. This parameter is only used if 'EmailAuthentication' is set to 'Basic'"), EmbeddedInstance('MSFT_Credential')] String EmailSMTPCredential;
    [Write, Description("The credentials of the execution account to be used."), EmbeddedInstance('MSFT_Credential')] String ExecutionAccount;
    [Write, Description("The credentials of the file share account to be used."), EmbeddedInstance('MSFT_Credential')] String FileShareAccount;
    [Read, Description("NOT YET IMPLEMENTED. When specified, the database server will be added as a Scale-Out server. If the database is not yet created, it will create the database. Default{'$false'}")] Boolean IsScaleOutServer;
    [Read, Description("NOT YET IMPLEMENTED. A list of Scale-Out servers used for high availability.")] String[] ScaleOutServers;
    [Read, Description("Is the Reporting Services instance initialized. This is used to create the encryption keys. This only needs to be run the first time or when the keys change.")] Boolean IsInitialized;
    [Read, Description("Reporting Services product version.")] String Version;
    [Read, Description("Reporting Services edition name which used to get the Sku type.")] String EditionName;
    [Read, Description("Reporting Services installation ID.")] String InstallationID;
    [Read, Description("Reporting Services configuration file path.")] String ReportServerConfigPath;
    [Read, Description("The current service account that Reporting Services is using.")] String ServiceAccountActual;
    [Read, Description("Whether or not Email is connecting to the SMTP server using SSL.")] String EmailSMTPSSL;
    [Read, Description("Readable URLs for the Reporting Services manager. Such as http://reportmanager.contoso.com")] String ReportServerInstanceURLs;
    [Read, Description("Readable URLs for the Reporting Services web portal. Such as http://reports.contoso.com")] String ReportServerInstanceWebPortalURLs;
};

