[ClassVersion("1.0.0.0"), FriendlyName("SqlRS")]
class MSFT_SqlRS : OMI_BaseResource
{

        [Parameter()]
        [System.Management.Automation.PSCredential]
        $ServiceAccount,

        [Parameter()]
        [ReportServiceAccount]
        $ServiceAccountLogonType,

        [Parameter()]
        [System.String]
        $ReportManagerVirtualDirectory,

        [Parameter()]
        [System.String[]]
        $ReportManagerUrls,

        [Parameter()]
        [System.String]
        $ReportWebPortalVirtualDirectory,

        [Parameter()]
        [System.String[]]
        $ReportWebPortalUrls,

        [Parameter()]
        [System.String]
        $DatabaseServerInstance,

        [Parameter()]
        [System.String]
        $DatabaseName,

        [Parameter()]
        [System.Management.Automation.PSCredential]
        $ReportDatabaseCredential,

        [Parameter()]
        [ReportDatabaseLogonType]
        $ReportDatabaseLogonType,

        [Parameter()]
        [System.String]
        $EmailSender,

        [Parameter()]
        [System.String]
        $EmailSMTP,

        [Parameter()]
        [EmailAuthenticationType]
        $EmailAuthentication,

        [Parameter()]
        [System.Management.Automation.PSCredential]
        $EmailSMTPCredential,

        [Parameter()]
        [System.Management.Automation.PSCredential]
        $ExecutionAccount,

        [Parameter()]
        [System.Management.Automation.PSCredential]
        $FileShareAccount

    [Key, Description("Currently there are only two possible instances. SSRS and PBIRS. While it may be possible to add more, this requires a lot of work and it's not really supported. It is possible to have SSRS and PBIRS installed on the same server though. Because of these limitations, these will be the only values supported. Default{'PBIRS'}"), ValueMap{'PBIRS', 'SSRS'}, Values{'PBIRS', 'SSRS'}] String ReportServiceInstanceName;
    [Write, Description("When specified, this will attempt to set the Reporting Service service account using it's short name. A Virtual account is a created account that can only be used locally. Meaning, that the database and reporting services have to be installed on the same server. If the database is intalled on a remote database like a cluster, a Windows account would be the best option, otherwise Reporting Services may fail to operate. Default{'Virtual'}), ValueMap{'Virtual', 'Network', 'System', 'Local', 'Windows'}, Values{'Virtual', 'Network', 'System', 'Local', 'Windows'}] String ServiceAccountLogonType;
    [Write, Description("When 'ServiceAccountLogonType' is specified as 'Windows', this credential will be used as the Report Services service account.") ] String ServiceAccount;
    [Write, Default('ReportServer')] String ReportManagerVirtualDirectory;
    [Write, Default('http://+:80')] String ReportManagerUrls;
    [Write, Default('Reports')] String ReportWebPortalVirtualDirectory;
    [Write, Default('http://+:80')] String ReportWebPortalUrls;
    [Write, Default("$env:Computername")] String DatabaseServerInstance;
    [Write, EmbeddedInstance('MSFT_Credential')] String DatabaseConnectCredential;
    [Write, Default('Integrated'), ValidateSet('Integrated', 'Sql')] String DatabaseConnectLogonType;
    [Write, Default('ReportServer')] String DatabaseName;
    [Write, User account used to grant access to the report server database. EmbeddedInstance('MSFT_Credential')] String ReportDatabaseCredential;
    [Write, Default('Service'), ValidateSet('Service', 'Sql', 'Windows'] String ReportDatabaseLogonType;
    [Write, Used to check if ReportDatabaseUserLoginType is Service, but database is remote. The report server will not work if using service account and the database is remote. This will only work if the Database and RS are installed on the same server. Default($false)] String UseServiceWithRemoteDatabase;
    [Write, ] String EmailSender;
    [Write, ] String EmailSMTP;
    [Write, ValueMap{"None","Basic","Integrated"}, Values{"None","Basic","Integrated"}] String EmailAuthentication ;
    [Write, "SMTP credentials used to connect to the SMTP server with. This parameter is only used if 'EmailAuthentication' is set to 'Basic'" EmbeddedInstance("MSFT_Credential")] String EmailSMTPCredential;
    [Write, EmbeddedInstance("MSFT_Credential")] String ExecutionAccount;
    [Write, EmbeddedInstance("MSFT_Credential")] String FileShareAccount;
    [Read, Description("A list of Scale-Out servers used for high availability.")] String[] ScaleOutServers;
    [Read, Description("Is the Reporting Services instance initialized. This is used to create the encryption keys. This only needs to be run the first time or when the keys change.")] Boolean IsInitialized;
    [Read, Description("Reporting Services product version.")] String Version;
    [Read, Description("Reporting Services edition name.")] String EditionName;
    [Read, Description("Reporting Services installation ID.")] String InstallationID;
    [Read, Description("Reporting Services configuration file path.")] String ReportServerConfigPath;
    [Read, Description("The current service account that Reporting Services is using.")] String ServiceAccountActual;
    [Read, Description("Whether or not Email is connecting to the SMTP server using SSL.")] String EmailSMTPSSL;
    [Read, Description("Readable URLs for the Reporting Services manager")] String ReportServerInstanceURLs;
    [Read, Description("Readable URLs for the Reporting Services web portal")] String ReportServerInstanceWebPortalURLs;
};

<#
    [Key, Description("Name of the SQL Server Reporting Services instance to be configured.")] String InstanceName;
    [Required, Description("Name of the SQL Server to host the Reporting Service database.")] String DatabaseServerName;
    [Required, Description("Name of the SQL Server instance to host the Reporting Service database.")] String DatabaseInstanceName;
    [Write, Description("The type of authentication to use when connecting to the database server, the default will be Integrated."), ValueMap{"Integrated","SQL"}, Values{"Integrated","SQL"}] String DatabaseAuthentication;
    [Write, Description("SQL user used to logon to the database. This parameter is only used if 'DatabaseAuthentication' is set to 'SQL'"), EmbeddedInstance("MSFT_Credential")] String DatabaseSQLCredential;
    [Write, Description("Service Account used to run the Reporting Services windows service. If using a managed service account, you can specify any password, but the '$' must be attached to the end of the service account name"), EmbeddedInstance("MSFT_Credential")] String ServiceAccount;
    [Write, Description('Specifies whether or not to use a Builtin Service Account. If this is true, then the ServiceAccount can only include one of the following options {"Virtual", "Network", "System", "Local"}')] Boolean UseBuiltInServiceAccount;
    [Write, Description("Report Server Web Service virtual directory. Optional.")] String ReportServerVirtualDirectory;
    [Write, Description("Report Server URL reservations. Optional. If not specified, 'http://+:80' URL reservation will be used.")] String ReportServerReservedUrl[];
    [Write, Description("Report Manager/Report Web App virtual directory name. Optional.")] String ReportsVirtualDirectory;
    [Write, Description("Report Manager/Report Web App URL reservations. Optional. If not specified, 'http://+:80' URL reservation will be used.")] String ReportsReservedUrl[];
    [Write, Description("The email used for the email sender address")] String EmailSender;
    [Write, Description("The SMTP server used to send emails")] String EmailSMTP;
    [Write, Description("The SMTP authentication type used to connect to the SMTP server. 'None' will not use any credentials. 'Basic' will use a username and password. 'Integrated' will use the 'ServiceAccount' credentials"), , ValueMap{"None","Basic","Integrated"}, Values{"None","Basic","Integrated"}] String EmailAuthentication ;
    [Write, Description("SMTP credentials used to connect to the SMTP server with. This parameter is only used if 'EmailAuthentication' is set to 'Basic'"), EmbeddedInstance("MSFT_Credential")] String EmailSMTPUser;
    [Write, Description("Execution service account credentials. This account can be used to run a report on behalf of this service account."), EmbeddedInstance("MSFT_Credential")] String ExecutionAccount;
    [Write, Description("File Share service account credentials. This account can be used to setup subscriptions to access file shares."), EmbeddedInstance("MSFT_Credential")] String FileShareAccount;
    [Write, Description("If connections to the Reporting Services must use SSL. If this parameter is not assigned a value, the default is that Reporting Services does not use SSL.")] Boolean UseSsl;
    [Write, Description("Reporting Services need to be restarted after initialization or settings change. If this parameter is set to $true, Reporting Services will not be restarted, even after initialization.")] Boolean SuppressRestart;
    [Read, Description("A list of Scale-Out servers used for high availability.")] String[] ScaleOutServers;
    [Read, Description("Is the Reporting Services instance initialized. This is used to create the encryption keys. This only needs to be run the first time or when the keys change.")] Boolean IsInitialized;
    [Read, Description("Reporting Services product version.")] String Version;
    [Read, Description("Reporting Services edition name.")] String EditionName;
    [Read, Description("Reporting Services installation ID.")] String InstallationID;
    [Read, Description("Reporting Services configuration file path.")] String ReportServerConfigPath;
    [Read, Description("The current service account that Reporting Services is using.")] String ServiceAccountActual;
    [Read, Description("Whether or not Email is connecting to the SMTP server using SSL.")] String EmailSMTPSSL;
    [Read, Description("Readable URLs for the Reporting Services manager")] String ReportServerManagerURLs;
    [Read, Description("Readable URLs for the Reporting Services web portal")] String ReportWebPortalURLs;
    [Read, Description("The name of the Reporting Services database.")] String DatabaseName;
#>
